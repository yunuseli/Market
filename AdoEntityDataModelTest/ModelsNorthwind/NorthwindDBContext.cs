// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace AdoEntityDataModelTest.ModelsNorthwind;

public partial class NorthwindDBContext : DbContext
{
    public NorthwindDBContext(DbContextOptions<NorthwindDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Bolge> Bolge { get; set; }

    public virtual DbSet<Bolgeler> Bolgeler { get; set; }

    public virtual DbSet<Kategoriler> Kategoriler { get; set; }

    public virtual DbSet<MusteriDemographics> MusteriDemographics { get; set; }

    public virtual DbSet<Musteriler> Musteriler { get; set; }

    public virtual DbSet<Nakliyeciler> Nakliyeciler { get; set; }

    public virtual DbSet<Personeller> Personeller { get; set; }

    public virtual DbSet<SatisDetaylari> SatisDetaylari { get; set; }

    public virtual DbSet<Satislar> Satislar { get; set; }

    public virtual DbSet<Tedarikciler> Tedarikciler { get; set; }

    public virtual DbSet<Urunler> Urunler { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Bolge>(entity =>
        {
            entity.HasKey(e => e.BolgeId).IsClustered(false);

            entity.Property(e => e.BolgeId).ValueGeneratedNever();
            entity.Property(e => e.BolgeTanimi).IsFixedLength();
        });

        modelBuilder.Entity<Bolgeler>(entity =>
        {
            entity.HasKey(e => e.TerritoryId).IsClustered(false);

            entity.Property(e => e.TerritoryTanimi).IsFixedLength();

            entity.HasOne(d => d.Bolge).WithMany(p => p.Bolgeler)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Bolgeler_Bolge");
        });

        modelBuilder.Entity<MusteriDemographics>(entity =>
        {
            entity.HasKey(e => e.MusteriTypeId).IsClustered(false);

            entity.Property(e => e.MusteriTypeId).IsFixedLength();
        });

        modelBuilder.Entity<Musteriler>(entity =>
        {
            entity.Property(e => e.MusteriId).IsFixedLength();

            entity.HasMany(d => d.MusteriType).WithMany(p => p.Musteri)
                .UsingEntity<Dictionary<string, object>>(
                    "MusteriMusteriDemo",
                    r => r.HasOne<MusteriDemographics>().WithMany()
                        .HasForeignKey("MusteriTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MusteriMusteriDemo"),
                    l => l.HasOne<Musteriler>().WithMany()
                        .HasForeignKey("MusteriId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MusteriMusteriDemo_Musteriler"),
                    j =>
                    {
                        j.HasKey("MusteriId", "MusteriTypeId").IsClustered(false);
                        j.IndexerProperty<string>("MusteriId")
                            .HasMaxLength(5)
                            .IsFixedLength()
                            .HasColumnName("MusteriID");
                        j.IndexerProperty<string>("MusteriTypeId")
                            .HasMaxLength(10)
                            .IsFixedLength()
                            .HasColumnName("MusteriTypeID");
                    });
        });

        modelBuilder.Entity<Personeller>(entity =>
        {
            entity.HasOne(d => d.BagliCalistigiKisiNavigation).WithMany(p => p.InverseBagliCalistigiKisiNavigation).HasConstraintName("FK_Personeller_Personeller");

            entity.HasMany(d => d.Territory).WithMany(p => p.Personel)
                .UsingEntity<Dictionary<string, object>>(
                    "PersonelBolgeler",
                    r => r.HasOne<Bolgeler>().WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PersonelBolgeler_Bolgeler"),
                    l => l.HasOne<Personeller>().WithMany()
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PersonelBolgeler_Personeller"),
                    j =>
                    {
                        j.HasKey("PersonelId", "TerritoryId").IsClustered(false);
                        j.IndexerProperty<int>("PersonelId").HasColumnName("PersonelID");
                        j.IndexerProperty<string>("TerritoryId")
                            .HasMaxLength(20)
                            .HasColumnName("TerritoryID");
                    });
        });

        modelBuilder.Entity<SatisDetaylari>(entity =>
        {
            entity.HasKey(e => new { e.SatisId, e.UrunId }).HasName("PK_Order_Details");

            entity.Property(e => e.Miktar).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.Satis).WithMany(p => p.SatisDetaylari)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Details_Satislar");

            entity.HasOne(d => d.Urun).WithMany(p => p.SatisDetaylari)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Details_Urunler");
        });

        modelBuilder.Entity<Satislar>(entity =>
        {
            entity.Property(e => e.MusteriId).IsFixedLength();
            entity.Property(e => e.NakliyeUcreti).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.Musteri).WithMany(p => p.Satislar).HasConstraintName("FK_Satislar_Musteriler");

            entity.HasOne(d => d.Personel).WithMany(p => p.Satislar).HasConstraintName("FK_Satislar_Personeller");

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Satislar).HasConstraintName("FK_Satislar_Nakliyeciler");
        });

        modelBuilder.Entity<Urunler>(entity =>
        {
            entity.Property(e => e.BirimFiyati).HasDefaultValueSql("((0))");
            entity.Property(e => e.EnAzYenidenSatisMikatari).HasDefaultValueSql("((0))");
            entity.Property(e => e.HedefStokDuzeyi).HasDefaultValueSql("((0))");
            entity.Property(e => e.YeniSatis).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.Kategori).WithMany(p => p.Urunler).HasConstraintName("FK_Urunler_Kategoriler");

            entity.HasOne(d => d.Tedarikci).WithMany(p => p.Urunler).HasConstraintName("FK_Urunler_Tedarikciler");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}